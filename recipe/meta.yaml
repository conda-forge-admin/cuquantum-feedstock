# Make sure the component versions are consistent with the SDK version!
{% set version = "23.03.0.20" %}
{% set cusv_version = "1.3.0" %}
{% set cutn_version = "2.1.0" %}

{% set cuda_major = "11" %}

# prioritize nompi variant via build number
{% set build_num = 1 %}
{% if mpi == 'nompi' %}
{% set cutn_build = build_num + 100 %}
{% else %}
{% set cutn_build = build_num %}
{% endif %}

# encode mpi dependency in the build string
{% if mpi != "nompi" %}
{% set mpi_prefix = "mpi_" + mpi %}
{% else %}
{% set mpi_prefix = "nompi" %}
{% endif %}

package:
  name: cuquantum-sdk  # dummy
  version: {{ version }}

source:
  - url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-x86_64/cuquantum-linux-x86_64-{{ version }}-archive.tar.xz  # [linux64]
    sha256: 08b31e47adcfbdecad935589e3245a35ee7ee0886f1e8c745aca570213598790  # [linux64]

  - url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-sbsa/cuquantum-linux-sbsa-{{ version }}-archive.tar.xz  # [aarch64]
    sha256: 11475c96d1b5713ce6646474796ace676c00f1259ba16c2130c7e74a6fb75ea2  # [aarch64]

  - url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-ppc64le/cuquantum-linux-ppc64le-{{ version }}-archive.tar.xz  # [ppc64le]
    sha256: 5b4dc4d8d86332f4e988bcb46214a291f2c4058f9a46e36bfa617dc4026a28e7  # [ppc64le]

  - url: https://github.com/NVIDIA/cuQuantum/archive/refs/tags/v{{ ".".join(version.split(".")[:3]) }}.tar.gz
    sha256: 9ec936b7a730c9ee1651f8df3f5d720c7ab1a951e91aef65f7c81b027e52ec9f

build:
  number: {{ build_num }}
  skip: true  # [not linux or cuda_compiler_version != "11.2"]

outputs:

  - name: cuquantum
    version: {{ version }}
    build:
      number: {{ build_num }}
      skip: true  # [not linux or cuda_compiler_version != "11.2"]
    requirements:
      build:
      host:
      run:
        - {{ pin_subpackage('custatevec', max_pin='x.x.x') }}
        - {{ pin_subpackage('cutensornet', max_pin='x.x.x') }}
      # https://github.com/conda-forge/cuda-version-feedstock/pull/3 is not merged yet,
      # otherwise we should add cuda-version to run, not run_constrained
      run_constrained:
        - cuda-version >=11.0,<12
    test:
      commands:
        - echo "ok!"

  - name: custatevec
    version: {{ cusv_version }}
    build:
      number: {{ build_num }}
      skip: true  # [not linux or cuda_compiler_version != "11.2"]
      script:
        - mkdir -p $PREFIX/include                                            # [linux]
        - mv include/custatevec.h $PREFIX/include/                            # [linux]
        - mkdir -p $PREFIX/lib                                                # [linux]
        - mv lib/{{ cuda_major }}/libcustatevec.so* $PREFIX/lib/              # [linux]

        # Patch for conda-forge:
        # According to the CUDA support matrix, we require glibc 2.27+ on aarch64-sbsa
        # and ppc64le, while conda-forge is still on 2.17. However, given that powf is
        # the only offending symbol that needs a newer glibc, it is the easiest if we
        # just patch it.
        - patchelf --clear-symbol-version powf $PREFIX/lib/libcustatevec.so   # [aarch64 or ppc64le]
      run_exports:
        - {{ pin_subpackage('custatevec', max_pin='x') }}
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      missing_dso_whitelist:
        - '*/libcublas.so*'
        - '*/libcublasLt.so*'
      post-link: post-link  # this is supported by conda-build, but undocumented
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cuda') }}
        - sysroot_linux-64 2.17  # [linux64]
      host:
      run:
        - cudatoolkit >=11.0,<12
      # https://github.com/conda-forge/cuda-version-feedstock/pull/3 is not merged yet,
      # otherwise we should add cuda-version to run, not run_constrained
      run_constrained:
        - cuda-version >=11.0,<12
    # apparently conda-build supports full test section spec, the document is super outdated
    test:
      requires:
        - git
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - sysroot_linux-64 2.17  # [linux64]
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        - cudatoolkit {{ cuda_compiler_version }}
      files:
        - test_load_elf.c
        - cusv_run_test.sh
      commands:
        - ./cusv_run_test.sh {{ version }}
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/license.html
      license_file: LICENSE
      summary: 'cuStateVec: A High-Performance Library for State Vector Quantum Simulators'
      description: |
        NVIDIA cuStateVec is a high-performance GPU library dedicated to operations with state vectors
        for expressing quantum algorithms. cuStateVec is a component of the NVIDIA cuQuantum SDK.

        The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/custatevec/index.html
      dev_url: https://github.com/NVIDIA/cuQuantum

  - name: cutensornet
    version: {{ cutn_version }}
    build:
      number: {{ cutn_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ cutn_build }}"
      skip: true  # [not linux or cuda_compiler_version != "11.2"]
      script:
        - mkdir -p $PREFIX/include                                            # [linux]
        - mv include/cutensornet* $PREFIX/include/                            # [linux]
        - mkdir -p $PREFIX/lib                                                # [linux]
        - mv lib/{{ cuda_major }}/libcutensornet.so* $PREFIX/lib/             # [linux]

        # build the wrapper lib
        - $GCC -shared -std=c11 -fPIC -I$CUDA_PATH/include -I$PREFIX/include distributed_interfaces/cutensornet_distributed_interface_mpi.c -L$PREFIX/lib -lmpi -o $PREFIX/lib/libcutensornet_distributed_interface_mpi.so  # [mpi != 'nompi']
        # copy activate/deactivate scripts
        - mkdir -p "${PREFIX}/etc/conda/activate.d"  # [mpi != 'nompi']
        - cp "${RECIPE_DIR}/cutn-activate.sh" "${PREFIX}/etc/conda/activate.d/cutn-activate.sh"  # [mpi != 'nompi']
        - mkdir -p "${PREFIX}/etc/conda/deactivate.d"  # [mpi != 'nompi']
        - cp "${RECIPE_DIR}/cutn-deactivate.sh" "${PREFIX}/etc/conda/deactivate.d/cutn-deactivate.sh"  # [mpi != 'nompi']
      run_exports:
        - {{ pin_subpackage('cutensornet', max_pin='x') }} {{ mpi_prefix }}_*
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      missing_dso_whitelist:
        - '*/libcutensor.so*'
        - '*/libcublas.so*'
        - '*/libcublasLt.so*'
        - '*/libcusolver.so*'
        - '*/libcusparse.so*'
      post-link: post-link  # this is supported by conda-build, but undocumented
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cuda') }}
        - sysroot_linux-64 2.17  # [linux64]
      host:
        - {{ mpi }}  # [mpi != 'nompi']
      run:
        - cudatoolkit >=11.0,<12
        - cutensor >=1.6.1,<2
        # conda-forge mpich does not support CUDA...
        - {{ mpi }} * external*  # [mpi == 'mpich']
        - {{ mpi }}              # [mpi == 'openmpi']
      run_constrained:
        # if users also wanna install mpi, we need to ensure the nompi version is not
        # picked by the solver, we do so by createing a conflict
        - openmpi <0.a0          # [mpi == 'nompi']
        - mpich <0.a0            # [mpi == 'nompi']
        # https://github.com/conda-forge/cuda-version-feedstock/pull/3 is not merged yet,
        # otherwise we should add cuda-version to run, not run_constrained
        - cuda-version >=11.0,<12
    # apparently conda-build supports full test section spec, the document is super outdated
    test:
      requires:
        - git
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - sysroot_linux-64 2.17  # [linux64]
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        - cudatoolkit {{ cuda_compiler_version }}
      files:
        - test_load_elf.c
        - cutn_run_test.sh
      commands:
        - ./cutn_run_test.sh {{ version }}
        - echo $CUTENSORNET_COMM_LIB
        - test -n $CUTENSORNET_COMM_LIB  # [mpi != 'nompi']
        - test -f $CUTENSORNET_COMM_LIB  # [mpi != 'nompi']
        - test -z $CUTENSORNET_COMM_LIB  # [mpi == 'nompi']
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/license.html
      license_file: LICENSE
      summary: 'cuTensorNet: A High-Performance Library for Tensor Network Computations'
      description: |
        NVIDIA cuTensorNet is a high-performance GPU library for tensor network computations,
        a component of the NVIDIA cuQuantum SDK.

        The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cutensornet/index.html
      dev_url: https://github.com/NVIDIA/cuQuantum

  - name: cuquantum-python
    version: {{ ".".join(version.split(".")[:3]) }}
    build:
      number: {{ build_num }}
      skip: true  # [not linux or cuda_compiler_version != "11.2"]
      script_env:
        - CUQUANTUM_ROOT=$PREFIX
        - CUTENSOR_ROOT=$PREFIX
      script:
        - cd python
        # {{ PYTHON }} is not resolved properly in multi-output recipes...
        - $PREFIX/bin/python -m pip install --no-deps --no-build-isolation -vv .
      ignore_run_exports_from:
        # let cuquantum handle the CUDA deps
        - {{ compiler('cuda') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - sysroot_linux-64 2.17  # [linux64]
        - cross-python_{{ target_platform }}    # [build_platform != target_platform]
        - python                                # [build_platform != target_platform]
        - cython                                # [build_platform != target_platform]
      host:
        - python
        - pip
        - cython
        - custatevec ={{ cusv_version }}
        - cutensornet ={{ cutn_version }}
        - packaging
      run:
        - python
        - numpy >=1.19
        - cupy >=9.5
        - {{ pin_subpackage('custatevec', max_pin='x') }}
        - {{ pin_subpackage('cutensornet', max_pin='x') }}
      run_constrained:
        - pytorch >=1.10
        - mpi4py >=3.1.0
        # we don't have to pin Qiskit or Cirq here because their versions are fairly recent on conda-forge
    test:
      imports:
        - cuquantum
        - cuquantum.custatevec
        - cuquantum.cutensornet
      commands:
        - python -m cuquantum --includes --libs --target custatevec --target cutensornet
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: BSD-3-Clause
      license_url: https://docs.nvidia.com/cuda/cuquantum/license.html#nvidia-cuquantum-python
      license_file: LICENSE
      summary: "cuQuantum Python: Python APIs for NVIDIA cuQuantum SDK"
      description: |
        NVIDIA cuQuantum Python provides Python bindings and high-level object-oriented
        models for accessing the full functionalities of NVIDIA cuQuantum SDK from Python.
      doc_url: https://docs.nvidia.com/cuda/cuquantum/python/index.html
      dev_url: https://github.com/NVIDIA/cuQuantum

about:
  home: https://developer.nvidia.com/cuquantum-sdk
  license: LicenseRef-cuQuantum-Software-License-Agreement
  license_url: https://docs.nvidia.com/cuda/cuquantum/license.html
  license_file: LICENSE
  summary: 'cuQuantum SDK: A High-Performance Library for Accelerating Quantum Information Science'
  description: |
    NVIDIA cuQuantum is an SDK of optimized libraries and tools for accelerating quantum computing workflows.
    Using NVIDIA GPU Tensor Core GPUs, developers can use cuQuantum to speed up quantum circuit simulations
    based on state vector and tensor network methods by orders of magnitude. Two major components of the
    SDK are

      - cuStateVec: a high-performance library for state vector computations
      - cuTensorNet: a high-performance library for tensor network computations

    The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuQuantum EULA -
    https://docs.nvidia.com/cuda/cuquantum/license.html
  doc_url: https://docs.nvidia.com/cuda/cuquantum/index.html
  dev_url: https://github.com/NVIDIA/cuQuantum

extra:
  recipe-maintainers:
    - leofang
    - JeremyWangNVDA
    - mtjrider
    - yangcal
    - DmitryLyakh
